-- –ï—Å–ª–∏ –Ω–∞—Å –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –Ω–µ –∏–∑ –°–∏, –≤—ã—Ö–æ–¥–∏–º
if msleep == nil then
	os.exit()
end

--[[ –î–æ–±–∞–≤–∏–ª —ç–Ω—Ç—Ä–æ–ø–∏–∏, –∏–Ω–∞—á–µ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏—è,
–ø–æ–ª—É—á–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è ]]
local seed = string.byte(io.open("/dev/random", "rb"):read(1))
math.randomseed(os.time() + seed)

function shuffle(t)
	for i = #t, 2, -1 do
		local j = math.random(i)
		t[i], t[j] = t[j], t[i]
	end
end

-- –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∞–º–∏ –ú–æ—Ä–∑–µ
morse = {
	-- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—á–∫–∏ (–æ—Ç –Ω–µ—ë –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏)
	delay = 200,

	table = {
		["–ê"]="._",
		["–ë"]="_...",
		["–í"]=".__",
		["–ì"]="__.",
		["–î"]="_..",
		["–ï"]=".",
		["–Å"]=".",
		["–ñ"]="..._",
		["–ó"]="__..",
		["–ò"]="..",
		["–ô"]=".___",
		["–ö"]="_._",
		["–õ"]="._..",
		["–ú"]="__",
		["–ù"]="_.",
		["–û"]="___",
		["–ü"]=".__.",
		["–†"]="._.",
		["–°"]="...",
		["–¢"]="_",
		["–£"]=".._",
		["–§"]=".._.",
		["–•"]="....",
		["–¶"]="_._.",
		["–ß"]="___.",
		["–®"]="____",
		["–©"]="__._",
		["–™"]="__.__",
		["–´"]="_.__",
		["–¨"]="_.._",
		["–≠"]=".._..",
		["–Æ"]="..__",
		["–Ø"]="._._",
		["."]="......",
		[","]="._._._",
		["?"]="..__..",
		["!"]="__..__",
		["1"]=".____",
		["2"]="..___",
		["3"]="...__",
		["4"]="...._",
		["5"]=".....",
		["6"]="_....",
		["7"]="__...",
		["8"]="___..",
		["9"]="____.",
		["0"]="_____",
	}
}

-- –í—ã–≤–æ–¥ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
function morse:char(ch)
	local table = self.table[ch]

	for i = 1, #table do
		local s = table:sub(i, i)

		led_on(true)
		-- –¢–∏—Ä–µ¬†‚Äî –∫–∞–∫ —Ç—Ä–∏ —Ç–æ—á–∫–∏
		msleep(self.delay * (s == "_" and 3 or 1))
		led_on(false)

		-- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
		if i ~= #table then
			msleep(self.delay)
		end
	end
end

-- –í—ã–≤–æ–¥ —Å–ª–æ–≤
function morse:words(str)
	-- –ü—Ä–∏–∑–Ω–∞–∫ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–∞—É–∑—ã –≤ –∫–æ–Ω—Ü–µ)
	local EOF = utf8.char(26)

	for ch in (str..EOF):gmatch(utf8.charpattern) do
		if ch == " " then
			-- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
			msleep(7 * self.delay)
		elseif ch ~= EOF then
			self:char(ch)
			-- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
			msleep(3 * self.delay)
		end
	end
end

-- –ü–æ–ª–µ –±–æ—è
field = {}
field.__index = field

setmetatable(field, {
  __call = function (cls, ...)
    return cls.new(...)
  end,
})

-- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
function field.new()
	local obj = {
		-- –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤—ã–≤–æ–¥–∏–º–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
		num = 1,

		field = {
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
		},
	}

	return setmetatable(obj, field)
end

-- –í—ã–≤–æ–¥ –ø–æ–ª—è –±–æ—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function field:debug()
	print('     –ê  –ë  –í  –ì  –î  –ï  –ñ  –ó  –ò  –ö')

	for y = 1, 10 do
		io.write(string.format("%02s", y)..': ')

		for x in ipairs(self.field) do
			local v = self.field[x][y]
			if v == nil or v == 0 then
				v = 'üåä'
			else
				v = 'üö¢'
			end
			io.write(v..' ')
		end
		print()
	end
end

-- –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
function field:ship_iter(x, y, l, is_vert)
	local _L = {x = x, y = y}
	local var = is_vert and 'y' or 'x'
	local max = _L[var] + l - 1

	_L[var] = _L[var] - 1

	return function()
		if _L[var] < max then
			_L[var] = _L[var] + 1
			return _L.x, _L.y
		end
	end
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –≤–æ–∫—Ä—É–≥, –≤–∫–ª—é—á–∞—è –µ—ë —Å–∞–º—É
function field:flap_around(x, y)
	local minx, maxx = math.max(1, x - 1), math.min(10, x + 1)
	local miny, maxy = math.max(1, y - 1), math.min(10, y + 1)

	x, y = minx, miny

	return function()
		if x <= maxx and y <= maxy then
			x = x + 1
			return x - 1, y
		else
			if y <= maxy then
				x, y = minx, y + 1
				return x, y - 1
			end
		end
	end
end

--[[ –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç,
–Ω–∞—á–∏–Ω–∞—è —Å –∫—Ä–∞—ë–≤ –∫ —Ü–µ–Ω—Ç—Ä—É ]]
function field:spiral_iter(is_vert)
	local min, max = 1, 10
	local insert = table.insert

	return function()
		coords = {}

		while min < max do
			if is_vert then
				for y = min, max do
					insert(coords, {min, y})
					insert(coords, {max, y})
				end
			else
				for x = min, max do
					insert(coords, {x, min})
					insert(coords, {x, max})
				end
			end

			min = min + 1
			max = max - 1

			shuffle(coords)
			return coords
		end
	end
end

-- –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–∞ –ø–æ–ª–µ
function field:drop_ship(l)
	local is_vert = math.random() > .5

	for spiral in self:spiral_iter(is_vert) do
		for _, xy in ipairs(spiral) do
			if self:check_ship(xy[1], xy[2], l, is_vert) then
				return xy[1], xy[2], is_vert
			end
		end
	end
end

-- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –∫–æ—Ä–∞–±–ª—è–º–∏
function field:fill()
	local long_ships = {4, 3, 2}

	--[[ –î–ª–∏–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å—Ç–∞–≤–∏–º –ø–æ —Å–ø–∏—Ä–∞–ª–∏ (—á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏
	–±–ª–∏–∂–µ –∫ –∫—Ä–∞—è–º, —Ç–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ]]
	for q, l in ipairs(long_ships) do
		for _ = 1, q do
			local x, y, is_vert = self:drop_ship(l)
			self:set_ship(x, y, l, is_vert)
		end
	end

	-- –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –±—Ä–æ—Å–∞–µ–º –∫–∞–∫ –ø—Ä–∏–¥—ë—Ç—Å—è
	for _ = 1, 4 do
		local x, y
		repeat
			x, y = math.random(10), math.random(10)
		until self:check_ship(x, y, 1, true)
		
		self:set_ship(x, y, 1, true)
	end
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª—è –≤ –ø–æ–∑–∏—Ü–∏—é
function field:check_ship(x, y, l, is_vert)
	for xd, yd in self:ship_iter(x, y, l, is_vert) do
		if xd > 10 or xd < 1 or yd > 10 or yd < 1 then
			return false
		end

		if self:get(xd, yd) ~= 0 then
			return false
		end
	end

	return true
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª—è
function field:set_ship(x, y, l, is_vert)
	-- –†–∏—Å—É–µ–º –∑–∞–±–æ—Ä—á–∏–∫ –æ–∫–æ–ª–æ –∫–æ—Ä–∞–±–ª—è (—á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –∫ –Ω–∞–º –Ω–µ –ø–æ–¥–æ—à—ë–ª –≤–ø–ª–æ—Ç–Ω—É—é)
	for xd, yd in self:ship_iter(x, y, l, is_vert) do
		for nx, ny in self:flap_around(xd, yd) do
			self:set(nx, ny)
		end
	end

	-- –†–∏—Å—É–µ–º —Å–∞–º –∫–æ—Ä–∞–±–ª—å
	for xd, yd in self:ship_iter(x, y, l, is_vert) do
		self:set(xd, yd, self.num)
	end

	self.num = self.num + 1
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è
function field:set(x, y, v)
	self.field[x][y] = v
end

-- –ó–∞–ø—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∏
function field:get(x, y)
	return self.field[x][y]
end

myf = field()
myf:fill()
myf:debug()

emf = field()

-- morse:words('–•–û–î–ò')
print(shift_duration())
