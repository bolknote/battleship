-- –ï—Å–ª–∏ –Ω–∞—Å –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –Ω–µ –∏–∑ –°–∏, –≤—ã—Ö–æ–¥–∏–º
if msleep == nil then
	os.exit()
end

DEBUG = true

--[[ –î–æ–±–∞–≤–∏–ª —ç–Ω—Ç—Ä–æ–ø–∏–∏, –∏–Ω–∞—á–µ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö –∑–Ω–∞—á–µ–Ω–∏—è,
–ø–æ–ª—É—á–∞–µ–º—ã–µ —á–µ—Ä–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è ]]
local seed = string.byte(io.open("/dev/random", "rb"):read(1))
math.randomseed(os.time() + seed)

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (—Ç–∞–±–ª–∏—Ü—ã)
function shuffle(t)
	for i = #t, 2, -1 do
		local j = math.random(i)
		t[i], t[j] = t[j], t[i]
	end
end

-- –†–∞–±–æ—Ç–∞ —Å –∫–æ–¥–∞–º–∏ –ú–æ—Ä–∑–µ
morse = {
	-- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—á–∫–∏ (–æ—Ç –Ω–µ—ë –æ—Ç—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏)
	delay = 100,

	table = {
		["–ê"]="._",
		["–ë"]="_...",
		["–í"]=".__",
		["–ì"]="__.",
		["–î"]="_..",
		["–ï"]=".",
		["–ñ"]="..._",
		["–ó"]="__..",
		["–ò"]="..",
		["–ô"]=".___",
		["–ö"]="_._",
		["–õ"]="._..",
		["–ú"]="__",
		["–ù"]="_.",
		["–û"]="___",
		["–ü"]=".__.",
		["–†"]="._.",
		["–°"]="...",
		["–¢"]="_",
		["–£"]=".._",
		["–§"]=".._.",
		["–•"]="....",
		["–¶"]="_._.",
		["–ß"]="___.",
		["–®"]="____",
		["–©"]="__._",
		["–™"]="__.__",
		["–´"]="_.__",
		["–¨"]="_.._",
		["–≠"]=".._..",
		["–Æ"]="..__",
		["–Ø"]="._._",
		["."]="......",
		[","]="._._._",
		["?"]="..__..",
		["!"]="__..__",
		["1"]=".____",
		["2"]="..___",
		["3"]="...__",
		["4"]="...._",
		["5"]=".....",
		["6"]="_....",
		["7"]="__...",
		["8"]="___..",
		["9"]="____.",
		["0"]="_____",
	}
}

function morse:find(s)
	for ch, seq in pairs(self.table) do
		if s == seq then
			return ch
		end
	end

	return nil
end

-- –í—ã–≤–æ–¥ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
function morse:char(ch)
	local table = assert(self.table[ch])

	for i = 1, #table do
		local s = table:sub(i, i)

		led_on(true)
		-- –¢–∏—Ä–µ¬†‚Äî –∫–∞–∫ —Ç—Ä–∏ —Ç–æ—á–∫–∏
		msleep(self.delay * (s == "_" and 3 or 1))
		led_on(false)

		-- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏, –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π
		if i ~= #table then
			msleep(self.delay)
		end
	end
end

-- –í—ã–≤–æ–¥ —Å–ª–æ–≤
function morse:words(str)
	if DEBUG then print('–û—Ç–≤–µ—Ç: '..str) end

	-- –ü—Ä–∏–∑–Ω–∞–∫ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–∞—É–∑—ã –≤ –∫–æ–Ω—Ü–µ)
	local EOF = utf8.char(26)

	for ch in (str..EOF):gmatch(utf8.charpattern) do
		if ch == " " then
			-- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏
			msleep(7 * self.delay)
		elseif ch ~= EOF then
			self:char(ch)
			-- –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
			msleep(3 * self.delay)
		end
	end
end

-- –ü–æ–ª–µ –±–æ—è
field = {}
field.__index = field

setmetatable(field, {
  __call = function (cls, ...)
    return cls.new(...)
  end,
})

-- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
function field.new()
	local obj = {
		-- –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤—ã–≤–æ–¥–∏–º–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
		num = 1,

		field = {
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, },
		},
	}

	return setmetatable(obj, field)
end

-- –í—ã–≤–æ–¥ –ø–æ–ª—è –±–æ—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
function field:debug()
	print('     –ê  –ë  –í  –ì  –î  –ï  –ñ  –ó  –ò  –ö')

	for y = 1, 10 do
		io.write(string.format("%02s", y)..': ')

		for x = 1, 10 do
			local v = self.field[x][y]
			-- –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
			if v == nil or v == 0 then
				v = 'üåä'
			-- —Å—Ç—Ä–µ–ª—è–ª–∏, —Ä–∞–Ω–∏–ª–∏
			elseif v  == 'f' then
				v = 'üî•'
			-- —Å—Ç—Ä–µ–ª—è–ª–∏, —É–±–∏–ª–∏
			elseif v == 'F' then
				v = 'üíÄ'
			-- —Å—Ç—Ä–µ–ª—è–ª–∏, –º–∏–º–æ
			elseif v == 'm' then
				v = 'üí•'
			else
			-- —á–∞—Å—Ç—å (¬´–ø–∞–ª—É–±–∞¬ª) –∫–æ—Ä–∞–±–ª—è
				v = 'üö¢'
			end
			io.write(v..' ')
		end
		print()
	end
end

-- –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–∞–±–ª–µ–π
function field:ship_iter(x, y, l, is_vert)
	local _L = {x = x, y = y}
	local var = is_vert and 'y' or 'x'
	local max = _L[var] + l - 1

	_L[var] = _L[var] - 1

	return function()
		if _L[var] < max then
			_L[var] = _L[var] + 1
			return _L.x, _L.y
		end
	end
end

-- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –≤–æ–∫—Ä—É–≥, –≤–∫–ª—é—á–∞—è –µ—ë —Å–∞–º—É
function field:flap_around(x, y)
	local minx, maxx = math.max(1, x - 1), math.min(10, x + 1)
	local miny, maxy = math.max(1, y - 1), math.min(10, y + 1)

	x, y = minx, miny

	return function()
		if x <= maxx and y <= maxy then
			x = x + 1
			return x - 1, y
		else
			if y <= maxy then
				x, y = minx, y + 1
				return x, y - 1
			end
		end
	end
end

--[[ –ò—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Ä–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç,
–Ω–∞—á–∏–Ω–∞—è —Å –∫—Ä–∞—ë–≤ –∫ —Ü–µ–Ω—Ç—Ä—É ]]
function field:spiral_iter(is_vert)
	local min, max = 1, 10
	local insert = table.insert

	return function()
		coords = {}

		while min < max do
			if is_vert then
				for y = min, max do
					insert(coords, {min, y})
					insert(coords, {max, y})
				end
			else
				for x = min, max do
					insert(coords, {x, min})
					insert(coords, {x, max})
				end
			end

			min = min + 1
			max = max - 1

			shuffle(coords)
			return coords
		end
	end
end

-- –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –Ω–∞ –ø–æ–ª–µ
function field:drop_ship(l)
	local is_vert = math.random() > .5

	for spiral in self:spiral_iter(is_vert) do
		for _, xy in ipairs(spiral) do
			if self:check_ship(xy[1], xy[2], l, is_vert) then
				return xy[1], xy[2], is_vert
			end
		end
	end
end

-- –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è –∫–æ—Ä–∞–±–ª—è–º–∏
function field:fill()
	local long_ships = {4, 3, 2}

	--[[ –î–ª–∏–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ —Å—Ç–∞–≤–∏–º –ø–æ —Å–ø–∏—Ä–∞–ª–∏ (—á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏
	–±–ª–∏–∂–µ –∫ –∫—Ä–∞—è–º, —Ç–∞–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ]]
	for q, l in ipairs(long_ships) do
		for _ = 1, q do
			local x, y, is_vert = self:drop_ship(l)
			self:set_ship(x, y, l, is_vert)
		end
	end

	-- –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã –±—Ä–æ—Å–∞–µ–º –∫–∞–∫ –ø—Ä–∏–¥—ë—Ç—Å—è
	for _ = 1, 4 do
		local x, y
		repeat
			x, y = math.random(10), math.random(10)
		until self:check_ship(x, y, 1, true)
		
		self:set_ship(x, y, 1, true)
	end
end

-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª—è –≤ –ø–æ–∑–∏—Ü–∏—é
function field:check_ship(x, y, l, is_vert)
	for xd, yd in self:ship_iter(x, y, l, is_vert) do
		if xd > 10 or xd < 1 or yd > 10 or yd < 1 then
			return false
		end

		if self:get(xd, yd) ~= 0 then
			return false
		end
	end

	return true
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª—è
function field:set_ship(x, y, l, is_vert)
	-- –†–∏—Å—É–µ–º –∑–∞–±–æ—Ä—á–∏–∫ –æ–∫–æ–ª–æ –∫–æ—Ä–∞–±–ª—è (—á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –∫ –Ω–∞–º –Ω–µ –ø–æ–¥–æ—à—ë–ª –≤–ø–ª–æ—Ç–Ω—É—é)
	for xd, yd in self:ship_iter(x, y, l, is_vert) do
		for nx, ny in self:flap_around(xd, yd) do
			self:set(nx, ny)
		end
	end

	-- –†–∏—Å—É–µ–º —Å–∞–º –∫–æ—Ä–∞–±–ª—å
	for xd, yd in self:ship_iter(x, y, l, is_vert) do
		self:set(xd, yd, self.num)
	end

	self.num = self.num + 1
end

-- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è
function field:set(x, y, v)
	self.field[x][y] = v
end

-- –ó–∞–ø—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–µ—Ç–∫–∏
function field:get(x, y)
	return self.field[x][y]
end

-- –í—ã—Å—Ç—Ä–µ–ª –ø–æ –∫–ª–µ—Ç–∫–µ
function field:fire(x, y)
	--[[ –£ –Ω–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
	–ø—Ä–æ–º–∞—Ö, —Ä–∞–Ω–∏–ª, —É–±–∏–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–∞–±–ª–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞) ]]

	local v = self:get(x, y)

	-- –í –∫–ª–µ—Ç–∫—É —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ ‚Äî –º–∏–º–æ
	if v == 'f' or v == 'F' or v == 'm' then
		return '–ú' -- –ú–∏–º–æ
	end

	-- –í –∫–ª–µ—Ç–∫–µ –Ω–∏—á–µ–≥–æ ‚Äî –º–∏–º–æ
	if v == nil or v == 0 then
		self:set(x, y, 'm')
		return '–ú' -- –ú–∏–º–æ
	end

	self:set(x, y, 'f')

	--[[ –ò–º–µ–µ—Ç —Å–º—ã—Å–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–∞–±–ª–µ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:
	–∏—â–µ—Ç—Å—è, –µ—Å–ª–∏ –ª–∏ –µ—â—ë —á–∞—Å—Ç—å –∫–æ—Ä–∞–±–ª—è —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º,
	–µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∫–æ—Ä–∞–±–ª—å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –µ—â—ë –Ω–µ —É–±–∏–ª–∏ ]]
	for ty = 1, 10 do
		for tx = 1, 10 do
			if self:get(tx, ty) == v then
				return '–†' -- –†–∞–Ω–∏–ª
			end
		end
	end

	--[[ –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —Å—Ç—Ä–µ–ª—å–±—ã –ø–æ
	–∫–æ—Ä–∞–±–ª—è–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–µ–º —É–±–∏—Ç—ã–π –∫–æ—Ä–∞–±–ª—å ‚Äî
	—á—Ç–æ –∫–æ—Ä–∞–±–ª—å —É–±–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–º–ø—å—é—Ç–µ—Ä—É –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ]]

	return '–£' -- –£–±–∏–ª
end

-- –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±—É–∫–≤—É
function morse:detect(buffer)
	local ch = morse:find(buffer)

	--[[ –ï—Å–ª–∏ –±—É–∫–≤—É –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å
	–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –∏ –Ω–∞–π—Ç–∏ –¥–≤–µ –±—É–∫–≤—ã]]
	if ch == nil then
		for i = 2, #buffer-1 do
			local b1, b2 = buffer:sub(1, i), buffer:sub(i+1)
			local ch1, ch2 = morse:find(b1), morse:find(b2)

			if ch1 ~= nil and ch2 ~= nil then
				return ch1..ch2
			end
		end

		return '?'
	end

	return ch
end

-- –í–≤–æ–¥ —Å–ª–æ–≤–∞ –≤ –∫–æ–¥–µ –ú–æ—Ä–∑–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function morse:input()
	local str, buffer, started = "", "", false

	while true do
		-- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∂–∏–º–∞–ª
		repeat
			before, dkey = shift_duration(morse.delay * 10)
		until started or before ~= nil

		-- –ü–æ —Ç–∞–π–º–∞—É—Ç—É —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–π
		if before == nil then
			if buffer ~= "" then
				str  = str .. morse:detect(buffer)
			end
			break
		end

		--[[ –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –∏ –ø–∞—É–∑–∞ –±–æ–ª—å—à–µ —É—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏,
		—Ç–æ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª ]]
		if started and before >= morse.delay * 3 then
			str  = str .. morse:detect(buffer)
			buffer = ""
			if DEBUG then io.write(' '); io.flush() end
		end

		--[[ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª–∏, —Ç–æ –Ω–∞—Å –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç
		before, —Ç–∞–º –º–æ–≥–ª–æ –æ—Å—Ç–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—É—Å–∫–∞]]
		local key = dkey > morse.delay * 3 and '_' or '.'

		if DEBUG then io.write(key); io.flush() end

		buffer = buffer .. key
		started = true
	end

	if DEBUG then print('\n–í–≤–µ–¥–µ–Ω–æ: '..str) end

	return str
end

-- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –≤–≤–æ–¥–∞ –¥–≤—É—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function input_coords()
	while true do
		local coords = ""

		repeat
			coords = coords .. morse:input()
		until utf8.len(coords) > 1

		if utf8.len(coords) == 2 then
			--[[ –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª –≤ —á–∏—Å–ª–æ –ø–æ –ø–æ—Ä—è–¥–∫—É (codepoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥
			—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞), 1040¬†‚Äî –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞ ¬´–ê¬ª,
			¬´–ê¬ª¬†‚Üí 1, ¬´–ë¬ª¬†‚Üí 2 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ ]]
			local x = utf8.codepoint(coords) - 1040 + 1
			 -- –ü–æ—Å–∫–æ–ª—å–∫—É ¬´–ô¬ª –≤ –ú–æ—Ä—Å–∫–æ–º –±–æ–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –Ω–∞–¥–æ —Å–¥–≤–∏–Ω—É—Ç—å
			if x == 11 then
				x = 10
			end

			if x >= 1 and x <= 10 then
				-- –ü–æ–ª—É—á–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª (–õ—É–∞ –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å UTF-8)
				local y = tonumber(coords:sub(utf8.offset(coords, 2), #coords))

				if y ~= nil then
					if DEBUG then print('–í–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: '..coords, x, y) end
					return x, y
				end
			end
		end

		print('–í–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: '..coords)
		morse:words("?")
	end
end

--[[ –°—Ç—Ä–æ–∏–º —Ä–µ—à—ë—Ç–∫—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—Ç—Ä–µ–ª—è—Ç—å,
—á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–∞–∫—É—é-—Ç–æ —Ñ–∏–≥—É—Ä—É, –Ω–∞–¥–æ —Å—Ç—Ä–µ–ª—è—Ç—å –ø–æ —Ä–µ—à—ë—Ç–∫–µ
—Ç–∞–∫–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞, –∞ —á—Ç–æ–±—ã —ç—Ç–æ –Ω–µ –±—ã–ª–æ –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–æ,
–ø–µ—Ä–µ–º–µ—à–∞–µ–º ]]
function field:build_grid(l)
	local x, y = 1, l
	local grid = {}

	while x <= 10 and y <= 10 do
		if self:get(x, y) == 0 then
			-- –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–µ —Å—Ç–æ–∏—Ç –ª–∏ –Ω–∞—à–∞ —Ç–æ—á–∫–∞ –æ–∫–æ–ª–æ –∫–æ—Ä–∞–±–ª—è,
			-- —Ä—è–¥–æ–º —Å –∫–æ—Ä–∞–±–ª—ë–º –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Å—Ç—Ä–µ–ª—è—Ç—å—ã
			for nx, ny in self:flap_around(x, y) do
				local m = self:get(nx, ny)

				if m ~= 0 and m ~= 'f' then
					goto ship_nearby
				end
			end

			table.insert(grid, {x, y})
			::ship_nearby::
		end

		if y == 10 then
			x, y = x + 1, 1
		else
			y = y + l

			if y > 10 then
				x, y = x + 1, y - 10 + 1
			end
		end
	end

	shuffle(grid)
	return grid
end

-- –ò—â–µ—Ç –Ω–∞ –ø–æ–ª–µ —Ñ–∏–≥—É—Ä—ã
function field:figures()
	--[[ –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∏–≥—É—Ä—ã, —Å—á–∏—Ç–∞—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ
	—É –Ω–∞—Å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ –Ω–æ–≤—ã–º–∏ ]]
	local figures = {}

	for x = 1, 10 do
		for y = 1, 10 do
			local v = self:get(x, y)

			if v ~= nil and v ~= 0 then
				for _, l in ipairs(figures) do
					for _, f in ipairs(l) do
						-- –ï—Å–ª–∏ —Ç–æ—á–∫–∏ —Ä—è–¥–æ–º, –∑–Ω–∞—á–∏—Ç –æ–Ω–∏ –æ–¥–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
						if math.abs(x - f[1]) + math.abs(y - f[2]) == 1 then
							table.insert(l, {x, y, value = v})
							goto found
						end
					end
				end
				-- –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∞—Å—å, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –∫–æ—Ä–∞–±–ª—è
				table.insert(figures, {{x, y, value = v}})
				::found::
			end
		end
	end

	--[[ –ù—É–∂–Ω–æ —É–ø–æ—Ä—è–¥–æ—á–∏—Ç—å —Ñ–∏–≥—É—Ä—ã ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –¥–ª–∏–Ω—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä,
	–ø–æ–ª–Ω—ã–µ –æ–Ω–∏ –∏–ª–∏ –Ω–µ—Ç, –∞ —Ç–∞–∫ –∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–∫–∏ ]]
	local info = {}

	for _, l in ipairs(figures) do
		-- –≤ —Å–∏–ª—É –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—Ö–æ–¥–∞ –º–ª–∞–¥—à–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
		local minx, miny = table.unpack(l[1])
		local maxx, maxy = table.unpack(l[#l])
		-- –¥–ª–∏–Ω–∞ –∫–æ—Ä–æ–±–ª—è ‚Äî —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –º–∏–Ω–∏–º—É–º–æ–º –∏ –º–∞–∫—Å–∏–º—É–º–æ–º
		local len = maxx - minx + maxy - miny + 1
		-- –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è, –µ—Å–ª–∏ –ø–æ ¬´–∏–∫—Å—É¬ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∑–Ω–∞—á–∏—Ç –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π
		local dir = maxx == minx and '|' or '-'

		table.insert(info, {
			-- –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
			min = {x = minx, y = miny},
			-- –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
			max = {x = maxx, y = maxy},
			-- –¥–ª–∏–Ω–∞ –∫–æ—Ä–∞–±–ª—è
			len = len,
			-- –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ¬´–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π¬ª –∏–ª–∏ ¬´–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π¬ª
			dir = dir,
			-- –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è, —á—Ç–æ –∫–æ—Ä–∞–±–ª—å —É–±–∏—Ç, —Ö–≤–∞—Ç–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
			died = l[1].value == 'F',
		})
	end

	return info
end

myfield = field()
-- myfield:fill()

myfield:set(3, 1, 'f')
myfield:set(3, 2, 'f')
myfield:set(3, 3, 'f')

myfield:set(5, 1, 'F')
myfield:set(5, 2, 'F')
myfield:set(5, 3, 'F')

myfield:set(4, 5, 'F')
myfield:set(5, 5, 'F')

myfield:set(7, 7, 'F')

t = myfield:figures()
require('print_table')
print_table(t)

for _, v in ipairs(myfield:build_grid(4)) do
	myfield:fire(table.unpack(v))
end

myfield:debug()

-- while true do
-- 	myfield:debug()
-- 	x, y = input_coords()
-- 	morse:words(myfield:fire(x, y))
-- end
